service: juriscloud
app: juriscloud
org: rodrigogs

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-finch
  - serverless-pseudo-parameters

package:
  individually: true

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
  client:
    bucketName: '${self:service}-${self:provider.stage}-webapp'
    distributionFolder: 'frontend/dist'
  usersTableName: '${self:service}-${self:provider.stage}-users'
  sessionTableName: '${self:service}-${self:provider.stage}-session'

provider:
  name: aws
  profile: rodrigogs
  runtime: nodejs12.x
  stage: ${opt:stage, 'development'}
  region: sa-east-1
  versionFunctions: false
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'logs:*'
      Resource: '*'
    - Effect: Allow
      Action:
        - 'dynamodb:*'
      Resource: '*'
  environment:
    USERS_TABLE: ${self:custom.usersTableName}
    SESSION_TABLE: ${self:custom.sessionTableName}

functions:
  authorizer:
    handler: functions/authorizer/index.handler

  healthcheck:
    handler: functions/api/healthcheck.handler
    events:
      - http:
          method: get
          path: /
          cors: true

  fail:
    handler: functions/api/fail.handler
    events:
      - http:
          method: get
          path: /fail/{status}/{message}
          cors: true
          authorizer: authorizer

  chat:
    handler: functions/api/chat.handler
    events:
      - http:
          method: post
          path: /chat
          cors: true
          authorizer: authorizer

  session:
    handler: functions/api/session.handler
    events:
      - http:
          method: get
          path: /session
          cors: true
          authorizer: authorizer

resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    # Dynamo Tables
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        GlobalSecondaryIndexes:
          - IndexName: username
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 10
              WriteCapacityUnits: 10
    SessionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.sessionTableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
